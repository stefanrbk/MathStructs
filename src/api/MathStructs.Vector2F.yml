### YamlMime:ManagedReference
items:
- uid: MathStructs.Vector2F
  commentId: T:MathStructs.Vector2F
  id: Vector2F
  parent: MathStructs
  children:
  - MathStructs.Vector2F.#ctor(System.Single)
  - MathStructs.Vector2F.#ctor(System.Single,System.Single)
  - MathStructs.Vector2F.Abs
  - MathStructs.Vector2F.Abs(MathStructs.Vector2F)
  - MathStructs.Vector2F.Add(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.Clamp(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.Clamp(MathStructs.Vector2F,MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.CopyTo(System.Single[])
  - MathStructs.Vector2F.CopyTo(System.Single[],System.Int32)
  - MathStructs.Vector2F.Deconstruct(System.Single@,System.Single@)
  - MathStructs.Vector2F.Distance(MathStructs.Vector2F)
  - MathStructs.Vector2F.Distance(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.DistanceSquared(MathStructs.Vector2F)
  - MathStructs.Vector2F.DistanceSquared(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.Divide(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.Divide(MathStructs.Vector2F,System.Single)
  - MathStructs.Vector2F.Dot(MathStructs.Vector2F)
  - MathStructs.Vector2F.Dot(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.Equals(MathStructs.Vector2F)
  - MathStructs.Vector2F.Equals(System.Nullable{System.Object})
  - MathStructs.Vector2F.GetHashCode
  - MathStructs.Vector2F.Length
  - MathStructs.Vector2F.LengthSquared
  - MathStructs.Vector2F.Lerp(MathStructs.Vector2F,MathStructs.Vector2F,System.Single)
  - MathStructs.Vector2F.Max(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.Min(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.Multiply(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.Multiply(MathStructs.Vector2F,System.Single)
  - MathStructs.Vector2F.Multiply(System.Single,MathStructs.Vector2F)
  - MathStructs.Vector2F.Negate(MathStructs.Vector2F)
  - MathStructs.Vector2F.Normalize
  - MathStructs.Vector2F.Normalize(MathStructs.Vector2F)
  - MathStructs.Vector2F.One
  - MathStructs.Vector2F.op_Addition(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.op_Division(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.op_Division(MathStructs.Vector2F,System.Single)
  - MathStructs.Vector2F.op_Equality(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.op_Inequality(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.op_Multiply(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.op_Multiply(MathStructs.Vector2F,System.Single)
  - MathStructs.Vector2F.op_Multiply(System.Single,MathStructs.Vector2F)
  - MathStructs.Vector2F.op_Subtraction(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.op_UnaryNegation(MathStructs.Vector2F)
  - MathStructs.Vector2F.op_UnaryPlus(MathStructs.Vector2F)
  - MathStructs.Vector2F.Reflect(MathStructs.Vector2F)
  - MathStructs.Vector2F.Reflect(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.SquareRoot(MathStructs.Vector2F)
  - MathStructs.Vector2F.Subtract(MathStructs.Vector2F,MathStructs.Vector2F)
  - MathStructs.Vector2F.ToString
  - MathStructs.Vector2F.ToString(System.Nullable{System.String})
  - MathStructs.Vector2F.ToString(System.Nullable{System.String},System.Nullable{IFormatProvider})
  - MathStructs.Vector2F.Transform(MathStructs.Matrix4x4F)
  - MathStructs.Vector2F.Transform(MathStructs.QuaternionF)
  - MathStructs.Vector2F.Transform(MathStructs.Vector2F,MathStructs.Matrix4x4F)
  - MathStructs.Vector2F.Transform(MathStructs.Vector2F,MathStructs.QuaternionF)
  - MathStructs.Vector2F.TransformNormal(MathStructs.Matrix4x4F)
  - MathStructs.Vector2F.TransformNormal(MathStructs.Vector2F,MathStructs.Matrix4x4F)
  - MathStructs.Vector2F.UnitX
  - MathStructs.Vector2F.UnitY
  - MathStructs.Vector2F.With(System.Nullable{System.Single},System.Nullable{System.Single})
  - MathStructs.Vector2F.X
  - MathStructs.Vector2F.Y
  - MathStructs.Vector2F.Zero
  langs:
  - csharp
  - vb
  name: Vector2F
  nameWithType: Vector2F
  fullName: MathStructs.Vector2F
  type: Struct
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Vector2F
    path: Vector2F.cs
    startLine: 6
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: 'public struct Vector2F : IEquatable<Vector2F>, IFormattable'
    content.vb: >-
      Public Structure Vector2F

          Implements IEquatable(Of Vector2F), IFormattable
  implements:
  - IEquatable{MathStructs.Vector2F}
  - IFormattable
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: MathStructs.Vector2F.X
  commentId: F:MathStructs.Vector2F.X
  id: X
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector2F.X
  fullName: MathStructs.Vector2F.X
  type: Field
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: X
    path: Vector2F.cs
    startLine: 10
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public float X
    return:
      type: System.Single
    content.vb: Public X As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Y
  commentId: F:MathStructs.Vector2F.Y
  id: Y
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector2F.Y
  fullName: MathStructs.Vector2F.Y
  type: Field
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Y
    path: Vector2F.cs
    startLine: 11
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public float Y
    return:
      type: System.Single
    content.vb: Public Y As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Zero
  commentId: P:MathStructs.Vector2F.Zero
  id: Zero
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Vector2F.Zero
  fullName: MathStructs.Vector2F.Zero
  type: Property
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Zero
    path: Vector2F.cs
    startLine: 13
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Zero { get; }
    parameters: []
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared ReadOnly Property Zero As Vector2F
  overload: MathStructs.Vector2F.Zero*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MathStructs.Vector2F.One
  commentId: P:MathStructs.Vector2F.One
  id: One
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Vector2F.One
  fullName: MathStructs.Vector2F.One
  type: Property
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: One
    path: Vector2F.cs
    startLine: 15
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F One { get; }
    parameters: []
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared ReadOnly Property One As Vector2F
  overload: MathStructs.Vector2F.One*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MathStructs.Vector2F.UnitX
  commentId: P:MathStructs.Vector2F.UnitX
  id: UnitX
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: UnitX
  nameWithType: Vector2F.UnitX
  fullName: MathStructs.Vector2F.UnitX
  type: Property
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: UnitX
    path: Vector2F.cs
    startLine: 17
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F UnitX { get; }
    parameters: []
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared ReadOnly Property UnitX As Vector2F
  overload: MathStructs.Vector2F.UnitX*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MathStructs.Vector2F.UnitY
  commentId: P:MathStructs.Vector2F.UnitY
  id: UnitY
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: UnitY
  nameWithType: Vector2F.UnitY
  fullName: MathStructs.Vector2F.UnitY
  type: Property
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: UnitY
    path: Vector2F.cs
    startLine: 19
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F UnitY { get; }
    parameters: []
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared ReadOnly Property UnitY As Vector2F
  overload: MathStructs.Vector2F.UnitY*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MathStructs.Vector2F.GetHashCode
  commentId: M:MathStructs.Vector2F.GetHashCode
  id: GetHashCode
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector2F.GetHashCode()
  fullName: MathStructs.Vector2F.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: GetHashCode
    path: Vector2F.cs
    startLine: 21
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overload: MathStructs.Vector2F.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: MathStructs.Vector2F.Equals(System.Nullable{System.Object})
  commentId: M:MathStructs.Vector2F.Equals(System.Nullable{System.Object})
  id: Equals(System.Nullable{System.Object})
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Equals(Nullable<Object>)
  nameWithType: Vector2F.Equals(Nullable<Object>)
  fullName: MathStructs.Vector2F.Equals(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Equals
    path: Vector2F.cs
    startLine: 24
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object?) As Boolean
  overload: MathStructs.Vector2F.Equals*
  nameWithType.vb: Vector2F.Equals(Nullable(Of Object))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: MathStructs.Vector2F.Equals(System.Nullable(Of System.Object))
  name.vb: Equals(Nullable(Of Object))
- uid: MathStructs.Vector2F.ToString
  commentId: M:MathStructs.Vector2F.ToString
  id: ToString
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector2F.ToString()
  fullName: MathStructs.Vector2F.ToString()
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: ToString
    path: Vector2F.cs
    startLine: 28
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: MathStructs.Vector2F.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: MathStructs.Vector2F.ToString(System.Nullable{System.String})
  commentId: M:MathStructs.Vector2F.ToString(System.Nullable{System.String})
  id: ToString(System.Nullable{System.String})
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: ToString(Nullable<String>)
  nameWithType: Vector2F.ToString(Nullable<String>)
  fullName: MathStructs.Vector2F.ToString(System.Nullable<System.String>)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: ToString
    path: Vector2F.cs
    startLine: 31
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public string ToString(string? format)
    parameters:
    - id: format
      type: System.Nullable{System.String}
    return:
      type: System.String
    content.vb: Public Function ToString(format As String?) As String
  overload: MathStructs.Vector2F.ToString*
  nameWithType.vb: Vector2F.ToString(Nullable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MathStructs.Vector2F.ToString(System.Nullable(Of System.String))
  name.vb: ToString(Nullable(Of String))
- uid: MathStructs.Vector2F.ToString(System.Nullable{System.String},System.Nullable{IFormatProvider})
  commentId: M:MathStructs.Vector2F.ToString(System.Nullable{System.String},System.Nullable{IFormatProvider})
  id: ToString(System.Nullable{System.String},System.Nullable{IFormatProvider})
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: ToString(Nullable<String>, Nullable<IFormatProvider>)
  nameWithType: Vector2F.ToString(Nullable<String>, Nullable<IFormatProvider>)
  fullName: MathStructs.Vector2F.ToString(System.Nullable<System.String>, System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: ToString
    path: Vector2F.cs
    startLine: 34
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public string ToString(string? format, IFormatProvider? formatProvider)
    parameters:
    - id: format
      type: System.Nullable{System.String}
    - id: formatProvider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.String
    content.vb: Public Function ToString(format As String?, formatProvider As IFormatProvider?) As String
  overload: MathStructs.Vector2F.ToString*
  nameWithType.vb: Vector2F.ToString(Nullable(Of String), Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MathStructs.Vector2F.ToString(System.Nullable(Of System.String), System.Nullable(Of IFormatProvider))
  name.vb: ToString(Nullable(Of String), Nullable(Of IFormatProvider))
- uid: MathStructs.Vector2F.Length
  commentId: M:MathStructs.Vector2F.Length
  id: Length
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Vector2F.Length()
  fullName: MathStructs.Vector2F.Length()
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Length
    path: Vector2F.cs
    startLine: 37
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public float Length()
    return:
      type: System.Single
    content.vb: Public Function Length As Single
  overload: MathStructs.Vector2F.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.LengthSquared
  commentId: M:MathStructs.Vector2F.LengthSquared
  id: LengthSquared
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: LengthSquared()
  nameWithType: Vector2F.LengthSquared()
  fullName: MathStructs.Vector2F.LengthSquared()
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: LengthSquared
    path: Vector2F.cs
    startLine: 41
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public float LengthSquared()
    return:
      type: System.Single
    content.vb: Public Function LengthSquared As Single
  overload: MathStructs.Vector2F.LengthSquared*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Distance(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Distance(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Distance(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Distance(Vector2F, Vector2F)
  nameWithType: Vector2F.Distance(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Distance(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Distance
    path: Vector2F.cs
    startLine: 45
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static float Distance(Vector2F vector1, Vector2F vector2)
    parameters:
    - id: vector1
      type: MathStructs.Vector2F
    - id: vector2
      type: MathStructs.Vector2F
    return:
      type: System.Single
    content.vb: Public Shared Function Distance(vector1 As Vector2F, vector2 As Vector2F) As Single
  overload: MathStructs.Vector2F.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Distance(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Distance(MathStructs.Vector2F)
  id: Distance(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Distance(Vector2F)
  nameWithType: Vector2F.Distance(Vector2F)
  fullName: MathStructs.Vector2F.Distance(MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Distance
    path: Vector2F.cs
    startLine: 49
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public float Distance(Vector2F value)
    parameters:
    - id: value
      type: MathStructs.Vector2F
    return:
      type: System.Single
    content.vb: Public Function Distance(value As Vector2F) As Single
  overload: MathStructs.Vector2F.Distance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.DistanceSquared(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.DistanceSquared(MathStructs.Vector2F,MathStructs.Vector2F)
  id: DistanceSquared(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: DistanceSquared(Vector2F, Vector2F)
  nameWithType: Vector2F.DistanceSquared(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.DistanceSquared(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: DistanceSquared
    path: Vector2F.cs
    startLine: 53
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static float DistanceSquared(Vector2F vector1, Vector2F vector2)
    parameters:
    - id: vector1
      type: MathStructs.Vector2F
    - id: vector2
      type: MathStructs.Vector2F
    return:
      type: System.Single
    content.vb: Public Shared Function DistanceSquared(vector1 As Vector2F, vector2 As Vector2F) As Single
  overload: MathStructs.Vector2F.DistanceSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.DistanceSquared(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.DistanceSquared(MathStructs.Vector2F)
  id: DistanceSquared(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: DistanceSquared(Vector2F)
  nameWithType: Vector2F.DistanceSquared(Vector2F)
  fullName: MathStructs.Vector2F.DistanceSquared(MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: DistanceSquared
    path: Vector2F.cs
    startLine: 57
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public float DistanceSquared(Vector2F value)
    parameters:
    - id: value
      type: MathStructs.Vector2F
    return:
      type: System.Single
    content.vb: Public Function DistanceSquared(value As Vector2F) As Single
  overload: MathStructs.Vector2F.DistanceSquared*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Normalize(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Normalize(MathStructs.Vector2F)
  id: Normalize(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Normalize(Vector2F)
  nameWithType: Vector2F.Normalize(Vector2F)
  fullName: MathStructs.Vector2F.Normalize(MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Normalize
    path: Vector2F.cs
    startLine: 61
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Normalize(Vector2F vector)
    parameters:
    - id: vector
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Normalize(vector As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Normalize
  commentId: M:MathStructs.Vector2F.Normalize
  id: Normalize
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vector2F.Normalize()
  fullName: MathStructs.Vector2F.Normalize()
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Normalize
    path: Vector2F.cs
    startLine: 65
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F Normalize()
    return:
      type: MathStructs.Vector2F
    content.vb: Public Function Normalize As Vector2F
  overload: MathStructs.Vector2F.Normalize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Reflect(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Reflect(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Reflect(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Reflect(Vector2F, Vector2F)
  nameWithType: Vector2F.Reflect(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Reflect(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Reflect
    path: Vector2F.cs
    startLine: 69
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Reflect(Vector2F vector, Vector2F normal)
    parameters:
    - id: vector
      type: MathStructs.Vector2F
    - id: normal
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Reflect(vector As Vector2F, normal As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Reflect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Reflect(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Reflect(MathStructs.Vector2F)
  id: Reflect(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Reflect(Vector2F)
  nameWithType: Vector2F.Reflect(Vector2F)
  fullName: MathStructs.Vector2F.Reflect(MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Reflect
    path: Vector2F.cs
    startLine: 73
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F Reflect(Vector2F normal)
    parameters:
    - id: normal
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Function Reflect(normal As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Reflect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Clamp(MathStructs.Vector2F,MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Clamp(MathStructs.Vector2F,MathStructs.Vector2F,MathStructs.Vector2F)
  id: Clamp(MathStructs.Vector2F,MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Clamp(Vector2F, Vector2F, Vector2F)
  nameWithType: Vector2F.Clamp(Vector2F, Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Clamp(MathStructs.Vector2F, MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Clamp
    path: Vector2F.cs
    startLine: 77
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Clamp(Vector2F value, Vector2F min, Vector2F max)
    parameters:
    - id: value
      type: MathStructs.Vector2F
    - id: min
      type: MathStructs.Vector2F
    - id: max
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Clamp(value As Vector2F, min As Vector2F, max As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Clamp(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Clamp(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Clamp(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Clamp(Vector2F, Vector2F)
  nameWithType: Vector2F.Clamp(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Clamp(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Clamp
    path: Vector2F.cs
    startLine: 81
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F Clamp(Vector2F min, Vector2F max)
    parameters:
    - id: min
      type: MathStructs.Vector2F
    - id: max
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Function Clamp(min As Vector2F, max As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Clamp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Lerp(MathStructs.Vector2F,MathStructs.Vector2F,System.Single)
  commentId: M:MathStructs.Vector2F.Lerp(MathStructs.Vector2F,MathStructs.Vector2F,System.Single)
  id: Lerp(MathStructs.Vector2F,MathStructs.Vector2F,System.Single)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Lerp(Vector2F, Vector2F, Single)
  nameWithType: Vector2F.Lerp(Vector2F, Vector2F, Single)
  fullName: MathStructs.Vector2F.Lerp(MathStructs.Vector2F, MathStructs.Vector2F, System.Single)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Lerp
    path: Vector2F.cs
    startLine: 85
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Lerp(Vector2F bounds1, Vector2F bounds2, float amount)
    parameters:
    - id: bounds1
      type: MathStructs.Vector2F
    - id: bounds2
      type: MathStructs.Vector2F
    - id: amount
      type: System.Single
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Lerp(bounds1 As Vector2F, bounds2 As Vector2F, amount As Single) As Vector2F
  overload: MathStructs.Vector2F.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Transform(MathStructs.Vector2F,MathStructs.Matrix4x4F)
  commentId: M:MathStructs.Vector2F.Transform(MathStructs.Vector2F,MathStructs.Matrix4x4F)
  id: Transform(MathStructs.Vector2F,MathStructs.Matrix4x4F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Transform(Vector2F, Matrix4x4F)
  nameWithType: Vector2F.Transform(Vector2F, Matrix4x4F)
  fullName: MathStructs.Vector2F.Transform(MathStructs.Vector2F, MathStructs.Matrix4x4F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Transform
    path: Vector2F.cs
    startLine: 89
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Transform(Vector2F vector, Matrix4x4F matrix)
    parameters:
    - id: vector
      type: MathStructs.Vector2F
    - id: matrix
      type: MathStructs.Matrix4x4F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Transform(vector As Vector2F, matrix As Matrix4x4F) As Vector2F
  overload: MathStructs.Vector2F.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Transform(MathStructs.Matrix4x4F)
  commentId: M:MathStructs.Vector2F.Transform(MathStructs.Matrix4x4F)
  id: Transform(MathStructs.Matrix4x4F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Transform(Matrix4x4F)
  nameWithType: Vector2F.Transform(Matrix4x4F)
  fullName: MathStructs.Vector2F.Transform(MathStructs.Matrix4x4F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Transform
    path: Vector2F.cs
    startLine: 94
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F Transform(Matrix4x4F matrix)
    parameters:
    - id: matrix
      type: MathStructs.Matrix4x4F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Function Transform(matrix As Matrix4x4F) As Vector2F
  overload: MathStructs.Vector2F.Transform*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Transform(MathStructs.Vector2F,MathStructs.QuaternionF)
  commentId: M:MathStructs.Vector2F.Transform(MathStructs.Vector2F,MathStructs.QuaternionF)
  id: Transform(MathStructs.Vector2F,MathStructs.QuaternionF)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Transform(Vector2F, QuaternionF)
  nameWithType: Vector2F.Transform(Vector2F, QuaternionF)
  fullName: MathStructs.Vector2F.Transform(MathStructs.Vector2F, MathStructs.QuaternionF)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Transform
    path: Vector2F.cs
    startLine: 98
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Transform(Vector2F value, QuaternionF rotation)
    parameters:
    - id: value
      type: MathStructs.Vector2F
    - id: rotation
      type: MathStructs.QuaternionF
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Transform(value As Vector2F, rotation As QuaternionF) As Vector2F
  overload: MathStructs.Vector2F.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Transform(MathStructs.QuaternionF)
  commentId: M:MathStructs.Vector2F.Transform(MathStructs.QuaternionF)
  id: Transform(MathStructs.QuaternionF)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Transform(QuaternionF)
  nameWithType: Vector2F.Transform(QuaternionF)
  fullName: MathStructs.Vector2F.Transform(MathStructs.QuaternionF)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Transform
    path: Vector2F.cs
    startLine: 112
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F Transform(QuaternionF rotation)
    parameters:
    - id: rotation
      type: MathStructs.QuaternionF
    return:
      type: MathStructs.Vector2F
    content.vb: Public Function Transform(rotation As QuaternionF) As Vector2F
  overload: MathStructs.Vector2F.Transform*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.TransformNormal(MathStructs.Vector2F,MathStructs.Matrix4x4F)
  commentId: M:MathStructs.Vector2F.TransformNormal(MathStructs.Vector2F,MathStructs.Matrix4x4F)
  id: TransformNormal(MathStructs.Vector2F,MathStructs.Matrix4x4F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector2F, Matrix4x4F)
  nameWithType: Vector2F.TransformNormal(Vector2F, Matrix4x4F)
  fullName: MathStructs.Vector2F.TransformNormal(MathStructs.Vector2F, MathStructs.Matrix4x4F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: TransformNormal
    path: Vector2F.cs
    startLine: 116
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F TransformNormal(Vector2F normal, Matrix4x4F matrix)
    parameters:
    - id: normal
      type: MathStructs.Vector2F
    - id: matrix
      type: MathStructs.Matrix4x4F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function TransformNormal(normal As Vector2F, matrix As Matrix4x4F) As Vector2F
  overload: MathStructs.Vector2F.TransformNormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.TransformNormal(MathStructs.Matrix4x4F)
  commentId: M:MathStructs.Vector2F.TransformNormal(MathStructs.Matrix4x4F)
  id: TransformNormal(MathStructs.Matrix4x4F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: TransformNormal(Matrix4x4F)
  nameWithType: Vector2F.TransformNormal(Matrix4x4F)
  fullName: MathStructs.Vector2F.TransformNormal(MathStructs.Matrix4x4F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: TransformNormal
    path: Vector2F.cs
    startLine: 121
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F TransformNormal(Matrix4x4F matrix)
    parameters:
    - id: matrix
      type: MathStructs.Matrix4x4F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Function TransformNormal(matrix As Matrix4x4F) As Vector2F
  overload: MathStructs.Vector2F.TransformNormal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Add(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Add(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Add(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Add(Vector2F, Vector2F)
  nameWithType: Vector2F.Add(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Add(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Add
    path: Vector2F.cs
    startLine: 125
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Add(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Add(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Subtract(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Subtract(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Subtract(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Subtract(Vector2F, Vector2F)
  nameWithType: Vector2F.Subtract(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Subtract(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Subtract
    path: Vector2F.cs
    startLine: 129
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Subtract(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Subtract(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Multiply(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Multiply(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Multiply(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Multiply(Vector2F, Vector2F)
  nameWithType: Vector2F.Multiply(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Multiply(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Multiply
    path: Vector2F.cs
    startLine: 133
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Multiply(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Multiply(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Multiply(MathStructs.Vector2F,System.Single)
  commentId: M:MathStructs.Vector2F.Multiply(MathStructs.Vector2F,System.Single)
  id: Multiply(MathStructs.Vector2F,System.Single)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Multiply(Vector2F, Single)
  nameWithType: Vector2F.Multiply(Vector2F, Single)
  fullName: MathStructs.Vector2F.Multiply(MathStructs.Vector2F, System.Single)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Multiply
    path: Vector2F.cs
    startLine: 137
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Multiply(Vector2F left, float right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: System.Single
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Multiply(left As Vector2F, right As Single) As Vector2F
  overload: MathStructs.Vector2F.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Multiply(System.Single,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Multiply(System.Single,MathStructs.Vector2F)
  id: Multiply(System.Single,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Multiply(Single, Vector2F)
  nameWithType: Vector2F.Multiply(Single, Vector2F)
  fullName: MathStructs.Vector2F.Multiply(System.Single, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Multiply
    path: Vector2F.cs
    startLine: 141
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Multiply(float left, Vector2F right)
    parameters:
    - id: left
      type: System.Single
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Multiply(left As Single, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Divide(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Divide(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Divide(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Divide(Vector2F, Vector2F)
  nameWithType: Vector2F.Divide(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Divide(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Divide
    path: Vector2F.cs
    startLine: 145
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Divide(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Divide(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Divide(MathStructs.Vector2F,System.Single)
  commentId: M:MathStructs.Vector2F.Divide(MathStructs.Vector2F,System.Single)
  id: Divide(MathStructs.Vector2F,System.Single)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Divide(Vector2F, Single)
  nameWithType: Vector2F.Divide(Vector2F, Single)
  fullName: MathStructs.Vector2F.Divide(MathStructs.Vector2F, System.Single)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Divide
    path: Vector2F.cs
    startLine: 149
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Divide(Vector2F left, float right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: System.Single
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Divide(left As Vector2F, right As Single) As Vector2F
  overload: MathStructs.Vector2F.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Negate(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Negate(MathStructs.Vector2F)
  id: Negate(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Negate(Vector2F)
  nameWithType: Vector2F.Negate(Vector2F)
  fullName: MathStructs.Vector2F.Negate(MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Negate
    path: Vector2F.cs
    startLine: 153
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Negate(Vector2F value)
    parameters:
    - id: value
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Negate(value As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.#ctor(System.Single)
  commentId: M:MathStructs.Vector2F.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Vector2F(Single)
  nameWithType: Vector2F.Vector2F(Single)
  fullName: MathStructs.Vector2F.Vector2F(System.Single)
  type: Constructor
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: .ctor
    path: Vector2F.cs
    startLine: 157
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F(float value)
    parameters:
    - id: value
      type: System.Single
    content.vb: Public Sub New(value As Single)
  overload: MathStructs.Vector2F.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.#ctor(System.Single,System.Single)
  commentId: M:MathStructs.Vector2F.#ctor(System.Single,System.Single)
  id: '#ctor(System.Single,System.Single)'
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Vector2F(Single, Single)
  nameWithType: Vector2F.Vector2F(Single, Single)
  fullName: MathStructs.Vector2F.Vector2F(System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: .ctor
    path: Vector2F.cs
    startLine: 160
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F(float x, float y)
    parameters:
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    content.vb: Public Sub New(x As Single, y As Single)
  overload: MathStructs.Vector2F.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Deconstruct(System.Single@,System.Single@)
  commentId: M:MathStructs.Vector2F.Deconstruct(System.Single@,System.Single@)
  id: Deconstruct(System.Single@,System.Single@)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Deconstruct(out Single, out Single)
  nameWithType: Vector2F.Deconstruct(out Single, out Single)
  fullName: MathStructs.Vector2F.Deconstruct(out System.Single, out System.Single)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Deconstruct
    path: Vector2F.cs
    startLine: 166
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public void Deconstruct(out float x, out float y)
    parameters:
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    content.vb: Public Sub Deconstruct(ByRef x As Single, ByRef y As Single)
  overload: MathStructs.Vector2F.Deconstruct*
  nameWithType.vb: Vector2F.Deconstruct(ByRef Single, ByRef Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MathStructs.Vector2F.Deconstruct(ByRef System.Single, ByRef System.Single)
  name.vb: Deconstruct(ByRef Single, ByRef Single)
- uid: MathStructs.Vector2F.With(System.Nullable{System.Single},System.Nullable{System.Single})
  commentId: M:MathStructs.Vector2F.With(System.Nullable{System.Single},System.Nullable{System.Single})
  id: With(System.Nullable{System.Single},System.Nullable{System.Single})
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: With(Nullable<Single>, Nullable<Single>)
  nameWithType: Vector2F.With(Nullable<Single>, Nullable<Single>)
  fullName: MathStructs.Vector2F.With(System.Nullable<System.Single>, System.Nullable<System.Single>)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: With
    path: Vector2F.cs
    startLine: 173
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F With(float? x = null, float? y = null)
    parameters:
    - id: x
      type: System.Nullable{System.Single}
    - id: y
      type: System.Nullable{System.Single}
    return:
      type: MathStructs.Vector2F
    content.vb: Public Function With(x As Single? = Nothing, y As Single? = Nothing) As Vector2F
  overload: MathStructs.Vector2F.With*
  nameWithType.vb: Vector2F.With(Nullable(Of Single), Nullable(Of Single))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MathStructs.Vector2F.With(System.Nullable(Of System.Single), System.Nullable(Of System.Single))
  name.vb: With(Nullable(Of Single), Nullable(Of Single))
- uid: MathStructs.Vector2F.CopyTo(System.Single[])
  commentId: M:MathStructs.Vector2F.CopyTo(System.Single[])
  id: CopyTo(System.Single[])
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: CopyTo(Single[])
  nameWithType: Vector2F.CopyTo(Single[])
  fullName: MathStructs.Vector2F.CopyTo(System.Single[])
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: CopyTo
    path: Vector2F.cs
    startLine: 177
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public void CopyTo(float[] array)
    parameters:
    - id: array
      type: System.Single[]
    content.vb: Public Sub CopyTo(array As Single())
  overload: MathStructs.Vector2F.CopyTo*
  nameWithType.vb: Vector2F.CopyTo(Single())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MathStructs.Vector2F.CopyTo(System.Single())
  name.vb: CopyTo(Single())
- uid: MathStructs.Vector2F.CopyTo(System.Single[],System.Int32)
  commentId: M:MathStructs.Vector2F.CopyTo(System.Single[],System.Int32)
  id: CopyTo(System.Single[],System.Int32)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: CopyTo(Single[], Int32)
  nameWithType: Vector2F.CopyTo(Single[], Int32)
  fullName: MathStructs.Vector2F.CopyTo(System.Single[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: CopyTo
    path: Vector2F.cs
    startLine: 181
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public void CopyTo(float[] array, int index)
    parameters:
    - id: array
      type: System.Single[]
    - id: index
      type: System.Int32
    content.vb: Public Sub CopyTo(array As Single(), index As Integer)
  overload: MathStructs.Vector2F.CopyTo*
  nameWithType.vb: Vector2F.CopyTo(Single(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MathStructs.Vector2F.CopyTo(System.Single(), System.Int32)
  name.vb: CopyTo(Single(), Int32)
- uid: MathStructs.Vector2F.Equals(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Equals(MathStructs.Vector2F)
  id: Equals(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Equals(Vector2F)
  nameWithType: Vector2F.Equals(Vector2F)
  fullName: MathStructs.Vector2F.Equals(MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Equals
    path: Vector2F.cs
    startLine: 192
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public bool Equals(Vector2F other)
    parameters:
    - id: other
      type: MathStructs.Vector2F
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Vector2F) As Boolean
  overload: MathStructs.Vector2F.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Dot(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Dot(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Dot(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Dot(Vector2F, Vector2F)
  nameWithType: Vector2F.Dot(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Dot(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Dot
    path: Vector2F.cs
    startLine: 196
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static float Dot(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: System.Single
    content.vb: Public Shared Function Dot(left As Vector2F, right As Vector2F) As Single
  overload: MathStructs.Vector2F.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Dot(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Dot(MathStructs.Vector2F)
  id: Dot(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Dot(Vector2F)
  nameWithType: Vector2F.Dot(Vector2F)
  fullName: MathStructs.Vector2F.Dot(MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Dot
    path: Vector2F.cs
    startLine: 201
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public float Dot(Vector2F vector)
    parameters:
    - id: vector
      type: MathStructs.Vector2F
    return:
      type: System.Single
    content.vb: Public Function Dot(vector As Vector2F) As Single
  overload: MathStructs.Vector2F.Dot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.Min(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Min(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Min(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Min(Vector2F, Vector2F)
  nameWithType: Vector2F.Min(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Min(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Min
    path: Vector2F.cs
    startLine: 205
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Min(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Min(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Max(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Max(MathStructs.Vector2F,MathStructs.Vector2F)
  id: Max(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Max(Vector2F, Vector2F)
  nameWithType: Vector2F.Max(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Max(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Max
    path: Vector2F.cs
    startLine: 210
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Max(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Max(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Abs(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.Abs(MathStructs.Vector2F)
  id: Abs(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Abs(Vector2F)
  nameWithType: Vector2F.Abs(Vector2F)
  fullName: MathStructs.Vector2F.Abs(MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Abs
    path: Vector2F.cs
    startLine: 215
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F Abs(Vector2F value)
    parameters:
    - id: value
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function Abs(value As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.Abs
  commentId: M:MathStructs.Vector2F.Abs
  id: Abs
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Abs()
  nameWithType: Vector2F.Abs()
  fullName: MathStructs.Vector2F.Abs()
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: Abs
    path: Vector2F.cs
    startLine: 219
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public Vector2F Abs()
    return:
      type: MathStructs.Vector2F
    content.vb: Public Function Abs As Vector2F
  overload: MathStructs.Vector2F.Abs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MathStructs.Vector2F.SquareRoot(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.SquareRoot(MathStructs.Vector2F)
  id: SquareRoot(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: SquareRoot(Vector2F)
  nameWithType: Vector2F.SquareRoot(Vector2F)
  fullName: MathStructs.Vector2F.SquareRoot(MathStructs.Vector2F)
  type: Method
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: SquareRoot
    path: Vector2F.cs
    startLine: 223
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F SquareRoot(Vector2F value)
    parameters:
    - id: value
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Function SquareRoot(value As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.SquareRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_UnaryPlus(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.op_UnaryPlus(MathStructs.Vector2F)
  id: op_UnaryPlus(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: UnaryPlus(Vector2F)
  nameWithType: Vector2F.UnaryPlus(Vector2F)
  fullName: MathStructs.Vector2F.UnaryPlus(MathStructs.Vector2F)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_UnaryPlus
    path: Vector2F.cs
    startLine: 227
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F operator +(Vector2F value)
    parameters:
    - id: value
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Operator +(value As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.op_UnaryPlus*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_UnaryNegation(MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.op_UnaryNegation(MathStructs.Vector2F)
  id: op_UnaryNegation(MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: UnaryNegation(Vector2F)
  nameWithType: Vector2F.UnaryNegation(Vector2F)
  fullName: MathStructs.Vector2F.UnaryNegation(MathStructs.Vector2F)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_UnaryNegation
    path: Vector2F.cs
    startLine: 231
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F operator -(Vector2F value)
    parameters:
    - id: value
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Operator -(value As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_Addition(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.op_Addition(MathStructs.Vector2F,MathStructs.Vector2F)
  id: op_Addition(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Addition(Vector2F, Vector2F)
  nameWithType: Vector2F.Addition(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Addition(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_Addition
    path: Vector2F.cs
    startLine: 235
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F operator +(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Operator +(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_Subtraction(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.op_Subtraction(MathStructs.Vector2F,MathStructs.Vector2F)
  id: op_Subtraction(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Subtraction(Vector2F, Vector2F)
  nameWithType: Vector2F.Subtraction(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Subtraction(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_Subtraction
    path: Vector2F.cs
    startLine: 239
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F operator -(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Operator -(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_Multiply(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.op_Multiply(MathStructs.Vector2F,MathStructs.Vector2F)
  id: op_Multiply(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Multiply(Vector2F, Vector2F)
  nameWithType: Vector2F.Multiply(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Multiply(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_Multiply
    path: Vector2F.cs
    startLine: 243
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F operator *(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Operator *(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_Multiply(MathStructs.Vector2F,System.Single)
  commentId: M:MathStructs.Vector2F.op_Multiply(MathStructs.Vector2F,System.Single)
  id: op_Multiply(MathStructs.Vector2F,System.Single)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Multiply(Vector2F, Single)
  nameWithType: Vector2F.Multiply(Vector2F, Single)
  fullName: MathStructs.Vector2F.Multiply(MathStructs.Vector2F, System.Single)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_Multiply
    path: Vector2F.cs
    startLine: 247
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F operator *(Vector2F left, float right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: System.Single
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Operator *(left As Vector2F, right As Single) As Vector2F
  overload: MathStructs.Vector2F.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_Multiply(System.Single,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.op_Multiply(System.Single,MathStructs.Vector2F)
  id: op_Multiply(System.Single,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Multiply(Single, Vector2F)
  nameWithType: Vector2F.Multiply(Single, Vector2F)
  fullName: MathStructs.Vector2F.Multiply(System.Single, MathStructs.Vector2F)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_Multiply
    path: Vector2F.cs
    startLine: 251
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F operator *(float left, Vector2F right)
    parameters:
    - id: left
      type: System.Single
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Operator *(left As Single, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_Division(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.op_Division(MathStructs.Vector2F,MathStructs.Vector2F)
  id: op_Division(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Division(Vector2F, Vector2F)
  nameWithType: Vector2F.Division(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Division(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_Division
    path: Vector2F.cs
    startLine: 255
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F operator /(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Operator /(left As Vector2F, right As Vector2F) As Vector2F
  overload: MathStructs.Vector2F.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_Division(MathStructs.Vector2F,System.Single)
  commentId: M:MathStructs.Vector2F.op_Division(MathStructs.Vector2F,System.Single)
  id: op_Division(MathStructs.Vector2F,System.Single)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Division(Vector2F, Single)
  nameWithType: Vector2F.Division(Vector2F, Single)
  fullName: MathStructs.Vector2F.Division(MathStructs.Vector2F, System.Single)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_Division
    path: Vector2F.cs
    startLine: 259
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static Vector2F operator /(Vector2F left, float right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: System.Single
    return:
      type: MathStructs.Vector2F
    content.vb: Public Shared Operator /(left As Vector2F, right As Single) As Vector2F
  overload: MathStructs.Vector2F.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_Equality(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.op_Equality(MathStructs.Vector2F,MathStructs.Vector2F)
  id: op_Equality(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Equality(Vector2F, Vector2F)
  nameWithType: Vector2F.Equality(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Equality(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_Equality
    path: Vector2F.cs
    startLine: 263
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static bool operator ==(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As Vector2F, right As Vector2F) As Boolean
  overload: MathStructs.Vector2F.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathStructs.Vector2F.op_Inequality(MathStructs.Vector2F,MathStructs.Vector2F)
  commentId: M:MathStructs.Vector2F.op_Inequality(MathStructs.Vector2F,MathStructs.Vector2F)
  id: op_Inequality(MathStructs.Vector2F,MathStructs.Vector2F)
  parent: MathStructs.Vector2F
  langs:
  - csharp
  - vb
  name: Inequality(Vector2F, Vector2F)
  nameWithType: Vector2F.Inequality(Vector2F, Vector2F)
  fullName: MathStructs.Vector2F.Inequality(MathStructs.Vector2F, MathStructs.Vector2F)
  type: Operator
  source:
    remote:
      path: src/Vector2F.cs
      branch: docs
      repo: https://github.com/stefanrbk/MathStructs.git
    id: op_Inequality
    path: Vector2F.cs
    startLine: 267
  assemblies:
  - MathStructs
  namespace: MathStructs
  syntax:
    content: public static bool operator !=(Vector2F left, Vector2F right)
    parameters:
    - id: left
      type: MathStructs.Vector2F
    - id: right
      type: MathStructs.Vector2F
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As Vector2F, right As Vector2F) As Boolean
  overload: MathStructs.Vector2F.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: MathStructs
  commentId: N:MathStructs
  name: MathStructs
  nameWithType: MathStructs
  fullName: MathStructs
- uid: IEquatable{MathStructs.Vector2F}
  commentId: '!:IEquatable{MathStructs.Vector2F}'
  definition: IEquatable`1
  name: IEquatable<Vector2F>
  nameWithType: IEquatable<Vector2F>
  fullName: IEquatable<MathStructs.Vector2F>
  nameWithType.vb: IEquatable(Of Vector2F)
  fullName.vb: IEquatable(Of MathStructs.Vector2F)
  name.vb: IEquatable(Of Vector2F)
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MathStructs.Vector2F
    name: Vector2F
    nameWithType: Vector2F
    fullName: MathStructs.Vector2F
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MathStructs.Vector2F
    name: Vector2F
    nameWithType: Vector2F
    fullName: MathStructs.Vector2F
  - name: )
    nameWithType: )
    fullName: )
- uid: IFormattable
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: IFormattable
- uid: IEquatable`1
  isExternal: true
  name: IEquatable<>
  nameWithType: IEquatable<>
  fullName: IEquatable<>
  nameWithType.vb: IEquatable(Of )
  fullName.vb: IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MathStructs.Vector2F.Zero*
  commentId: Overload:MathStructs.Vector2F.Zero
  name: Zero
  nameWithType: Vector2F.Zero
  fullName: MathStructs.Vector2F.Zero
- uid: MathStructs.Vector2F
  commentId: T:MathStructs.Vector2F
  parent: MathStructs
  name: Vector2F
  nameWithType: Vector2F
  fullName: MathStructs.Vector2F
- uid: MathStructs.Vector2F.One*
  commentId: Overload:MathStructs.Vector2F.One
  name: One
  nameWithType: Vector2F.One
  fullName: MathStructs.Vector2F.One
- uid: MathStructs.Vector2F.UnitX*
  commentId: Overload:MathStructs.Vector2F.UnitX
  name: UnitX
  nameWithType: Vector2F.UnitX
  fullName: MathStructs.Vector2F.UnitX
- uid: MathStructs.Vector2F.UnitY*
  commentId: Overload:MathStructs.Vector2F.UnitY
  name: UnitY
  nameWithType: Vector2F.UnitY
  fullName: MathStructs.Vector2F.UnitY
- uid: MathStructs.Vector2F.GetHashCode*
  commentId: Overload:MathStructs.Vector2F.GetHashCode
  name: GetHashCode
  nameWithType: Vector2F.GetHashCode
  fullName: MathStructs.Vector2F.GetHashCode
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MathStructs.Vector2F.Equals*
  commentId: Overload:MathStructs.Vector2F.Equals
  name: Equals
  nameWithType: Vector2F.Equals
  fullName: MathStructs.Vector2F.Equals
- uid: System.Nullable{System.Object}
  commentId: '!:System.Nullable{System.Object}'
  definition: System.Nullable`1
  name: Nullable<Object>
  nameWithType: Nullable<Object>
  fullName: System.Nullable<System.Object>
  nameWithType.vb: Nullable(Of Object)
  fullName.vb: System.Nullable(Of System.Object)
  name.vb: Nullable(Of Object)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MathStructs.Vector2F.ToString*
  commentId: Overload:MathStructs.Vector2F.ToString
  name: ToString
  nameWithType: Vector2F.ToString
  fullName: MathStructs.Vector2F.ToString
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{System.String}
  commentId: '!:System.Nullable{System.String}'
  definition: System.Nullable`1
  name: Nullable<String>
  nameWithType: Nullable<String>
  fullName: System.Nullable<System.String>
  nameWithType.vb: Nullable(Of String)
  fullName.vb: System.Nullable(Of System.String)
  name.vb: Nullable(Of String)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{IFormatProvider}
  commentId: '!:System.Nullable{IFormatProvider}'
  definition: System.Nullable`1
  name: Nullable<IFormatProvider>
  nameWithType: Nullable<IFormatProvider>
  fullName: System.Nullable<IFormatProvider>
  nameWithType.vb: Nullable(Of IFormatProvider)
  fullName.vb: System.Nullable(Of IFormatProvider)
  name.vb: Nullable(Of IFormatProvider)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: IFormatProvider
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MathStructs.Vector2F.Length*
  commentId: Overload:MathStructs.Vector2F.Length
  name: Length
  nameWithType: Vector2F.Length
  fullName: MathStructs.Vector2F.Length
- uid: MathStructs.Vector2F.LengthSquared*
  commentId: Overload:MathStructs.Vector2F.LengthSquared
  name: LengthSquared
  nameWithType: Vector2F.LengthSquared
  fullName: MathStructs.Vector2F.LengthSquared
- uid: MathStructs.Vector2F.Distance*
  commentId: Overload:MathStructs.Vector2F.Distance
  name: Distance
  nameWithType: Vector2F.Distance
  fullName: MathStructs.Vector2F.Distance
- uid: MathStructs.Vector2F.DistanceSquared*
  commentId: Overload:MathStructs.Vector2F.DistanceSquared
  name: DistanceSquared
  nameWithType: Vector2F.DistanceSquared
  fullName: MathStructs.Vector2F.DistanceSquared
- uid: MathStructs.Vector2F.Normalize*
  commentId: Overload:MathStructs.Vector2F.Normalize
  name: Normalize
  nameWithType: Vector2F.Normalize
  fullName: MathStructs.Vector2F.Normalize
- uid: MathStructs.Vector2F.Reflect*
  commentId: Overload:MathStructs.Vector2F.Reflect
  name: Reflect
  nameWithType: Vector2F.Reflect
  fullName: MathStructs.Vector2F.Reflect
- uid: MathStructs.Vector2F.Clamp*
  commentId: Overload:MathStructs.Vector2F.Clamp
  name: Clamp
  nameWithType: Vector2F.Clamp
  fullName: MathStructs.Vector2F.Clamp
- uid: MathStructs.Vector2F.Lerp*
  commentId: Overload:MathStructs.Vector2F.Lerp
  name: Lerp
  nameWithType: Vector2F.Lerp
  fullName: MathStructs.Vector2F.Lerp
- uid: MathStructs.Vector2F.Transform*
  commentId: Overload:MathStructs.Vector2F.Transform
  name: Transform
  nameWithType: Vector2F.Transform
  fullName: MathStructs.Vector2F.Transform
- uid: MathStructs.Matrix4x4F
  commentId: T:MathStructs.Matrix4x4F
  parent: MathStructs
  name: Matrix4x4F
  nameWithType: Matrix4x4F
  fullName: MathStructs.Matrix4x4F
- uid: MathStructs.QuaternionF
  commentId: T:MathStructs.QuaternionF
  parent: MathStructs
  name: QuaternionF
  nameWithType: QuaternionF
  fullName: MathStructs.QuaternionF
- uid: MathStructs.Vector2F.TransformNormal*
  commentId: Overload:MathStructs.Vector2F.TransformNormal
  name: TransformNormal
  nameWithType: Vector2F.TransformNormal
  fullName: MathStructs.Vector2F.TransformNormal
- uid: MathStructs.Vector2F.Add*
  commentId: Overload:MathStructs.Vector2F.Add
  name: Add
  nameWithType: Vector2F.Add
  fullName: MathStructs.Vector2F.Add
- uid: MathStructs.Vector2F.Subtract*
  commentId: Overload:MathStructs.Vector2F.Subtract
  name: Subtract
  nameWithType: Vector2F.Subtract
  fullName: MathStructs.Vector2F.Subtract
- uid: MathStructs.Vector2F.Multiply*
  commentId: Overload:MathStructs.Vector2F.Multiply
  name: Multiply
  nameWithType: Vector2F.Multiply
  fullName: MathStructs.Vector2F.Multiply
- uid: MathStructs.Vector2F.Divide*
  commentId: Overload:MathStructs.Vector2F.Divide
  name: Divide
  nameWithType: Vector2F.Divide
  fullName: MathStructs.Vector2F.Divide
- uid: MathStructs.Vector2F.Negate*
  commentId: Overload:MathStructs.Vector2F.Negate
  name: Negate
  nameWithType: Vector2F.Negate
  fullName: MathStructs.Vector2F.Negate
- uid: MathStructs.Vector2F.#ctor*
  commentId: Overload:MathStructs.Vector2F.#ctor
  name: Vector2F
  nameWithType: Vector2F.Vector2F
  fullName: MathStructs.Vector2F.Vector2F
- uid: MathStructs.Vector2F.Deconstruct*
  commentId: Overload:MathStructs.Vector2F.Deconstruct
  name: Deconstruct
  nameWithType: Vector2F.Deconstruct
  fullName: MathStructs.Vector2F.Deconstruct
- uid: MathStructs.Vector2F.With*
  commentId: Overload:MathStructs.Vector2F.With
  name: With
  nameWithType: Vector2F.With
  fullName: MathStructs.Vector2F.With
- uid: System.Nullable{System.Single}
  commentId: '!:System.Nullable{System.Single}'
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullName.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MathStructs.Vector2F.CopyTo*
  commentId: Overload:MathStructs.Vector2F.CopyTo
  name: CopyTo
  nameWithType: Vector2F.CopyTo
  fullName: MathStructs.Vector2F.CopyTo
- uid: System.Single[]
  isExternal: true
  name: Single[]
  nameWithType: Single[]
  fullName: System.Single[]
  nameWithType.vb: Single()
  fullName.vb: System.Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MathStructs.Vector2F.Dot*
  commentId: Overload:MathStructs.Vector2F.Dot
  name: Dot
  nameWithType: Vector2F.Dot
  fullName: MathStructs.Vector2F.Dot
- uid: MathStructs.Vector2F.Min*
  commentId: Overload:MathStructs.Vector2F.Min
  name: Min
  nameWithType: Vector2F.Min
  fullName: MathStructs.Vector2F.Min
- uid: MathStructs.Vector2F.Max*
  commentId: Overload:MathStructs.Vector2F.Max
  name: Max
  nameWithType: Vector2F.Max
  fullName: MathStructs.Vector2F.Max
- uid: MathStructs.Vector2F.Abs*
  commentId: Overload:MathStructs.Vector2F.Abs
  name: Abs
  nameWithType: Vector2F.Abs
  fullName: MathStructs.Vector2F.Abs
- uid: MathStructs.Vector2F.SquareRoot*
  commentId: Overload:MathStructs.Vector2F.SquareRoot
  name: SquareRoot
  nameWithType: Vector2F.SquareRoot
  fullName: MathStructs.Vector2F.SquareRoot
- uid: MathStructs.Vector2F.op_UnaryPlus*
  commentId: Overload:MathStructs.Vector2F.op_UnaryPlus
  name: UnaryPlus
  nameWithType: Vector2F.UnaryPlus
  fullName: MathStructs.Vector2F.UnaryPlus
- uid: MathStructs.Vector2F.op_UnaryNegation*
  commentId: Overload:MathStructs.Vector2F.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Vector2F.UnaryNegation
  fullName: MathStructs.Vector2F.UnaryNegation
- uid: MathStructs.Vector2F.op_Addition*
  commentId: Overload:MathStructs.Vector2F.op_Addition
  name: Addition
  nameWithType: Vector2F.Addition
  fullName: MathStructs.Vector2F.Addition
- uid: MathStructs.Vector2F.op_Subtraction*
  commentId: Overload:MathStructs.Vector2F.op_Subtraction
  name: Subtraction
  nameWithType: Vector2F.Subtraction
  fullName: MathStructs.Vector2F.Subtraction
- uid: MathStructs.Vector2F.op_Multiply*
  commentId: Overload:MathStructs.Vector2F.op_Multiply
  name: Multiply
  nameWithType: Vector2F.Multiply
  fullName: MathStructs.Vector2F.Multiply
- uid: MathStructs.Vector2F.op_Division*
  commentId: Overload:MathStructs.Vector2F.op_Division
  name: Division
  nameWithType: Vector2F.Division
  fullName: MathStructs.Vector2F.Division
- uid: MathStructs.Vector2F.op_Equality*
  commentId: Overload:MathStructs.Vector2F.op_Equality
  name: Equality
  nameWithType: Vector2F.Equality
  fullName: MathStructs.Vector2F.Equality
- uid: MathStructs.Vector2F.op_Inequality*
  commentId: Overload:MathStructs.Vector2F.op_Inequality
  name: Inequality
  nameWithType: Vector2F.Inequality
  fullName: MathStructs.Vector2F.Inequality
